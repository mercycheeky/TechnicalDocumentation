** start of undefined **

<!DOCTYPE html>
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Java Documentation</title>
  <link rel='stylesheet' href='styles.css'>
  </head>
  <body>
 <nav id ="navbar">
   <header>Java documentation</header>
     <ul>
       <li><a class="nav-link" href="#Getting_started_with_Java">Getting started with Java</a></li>

      <li><a class="nav-link"  href="#Java_entry_point">Java entry point</a></li>

      <li><a class="nav-link"  href="#Printing_to_the_console">Printing to the console</a></li>
        
      <li><a class="nav-link"  href="#Declaring_functions">Declaring functions</a></li>
      <li><a class="nav-link"  href="#Object_oriented_programming">Object oriented programming</a></li>
      </ul>
    </nav>

 <main id="main-doc">
   <section class="main-section" id="Getting_started_with_Java">
        <header>Getting started with Java</header>
        <p>Steps in getting started</p>
        <ol>
          <li>Download Java</li>
          <li>Download Java SDK</li>
          <li>Get an IDE</li>
          <li>Start a project within the IDE</li>
          <li>Code up Hello world and run the</li>
        </ol>
        <p>just adding code</p>
        <button class="section-button">Click Me!</button>
        <p>Let's hope you got it</p>
        <p>just adding code</p>
      </section>

      <section class='main-section' id='Java_entry_point'>
        <header>Java entry point</header>
        <p>The entry point to a java application is the main function.</p>
        <p>It is categorized bt its string[arg] as a parameter to the function.</p>

        <pre>
          <code>
            Public class myMainFunction{
              public static void main(string[]args){

              }
            }
          </code>
        </pre>

        <p>As you can see the main function is wrapped within a class which is part of the object oriented structure of java projects</p>
        <p>The name of the project is therefore 'mymainfunction'</p>
        <p>Let's hope you got it</p>
      </section>

      <section class='main-section' id='Printing_to_the_console'>
        <header>Printing to the console</header>
        <p>In order to print to the console, we use System.Out.println</p>


        <pre>
          <code>
            Public class myMainFunction{
              public static void main(string[]args){

              } System.Out.println('Hello world!');
            }
          </code>
        </pre>

        <p>In this example we are printing hello world to the console.</p>
        <p>Easy, right?</p>
        <p>Let's hope you got it</p>
      </section>

      <section class='main-section' id ='Declaring_functions'>
        <header>Declaring functions</header>

        <p>
          Functions are actually called methods in Java. Here is an example of how to declare a java method.

          <img> src="" alt=""</img>
        </p>
        <p>Some copiable code:</p>

        <pre>
          <code>
            Public static void myFunction(string name, int age){
              // Function code
            }
          </code>
        </pre>
        <p>Let's hope you got it</p>
      </section>

      <section class='main-section' id='Object_oriented_programming'>
        <header>Object oriented programming</header>
        <p>Java is known as an object oriented programming language.</p>
        This means that it is easy to represent entities as objects by using classes and encapsulation.

        <p>An example of this might be a student class to represent a student.</p>
        <p>Let's hope you got it</p>

<pre>
  <code>
    public class student{
      /*student properties*/
      private string name;
      private int age;

      /*constructor*/
      public student(string name, int age){
        this.name=name;
        this.age=age;
      }

      /*Getter method*/
      public string getname(){
return name;
      }
      /*setter method*/
      public void setname(String name){
this.name=name;
      }
    }

  </code>
</pre>
<p>We use this class by doing the following.</p>
<pre>
<code></code>
</pre>
      </section>
      </main>
      <footer>
        <p>Flyer brought to you by me</p>
      </footer>
    </body>

    </html>

** end of undefined **

** start of undefined **

*{
  margin:0;
  padding:0;
}
body{
  background-color:rgb(234,234,234);
  display:flex;
  flex-direction:column;
  min-height:100vh;

}
section{
  margin-top:40px;

}
#navbar{
  background-color:#fff;
  width:100%;
  border-bottom:1px solid;
}
#navbar li{
color:#4d4e53;
border-top:1px solid black;
list-style:none;
}
#navbar a{
  display:block;
  padding:10px 30px;
  color:#4d4e53;
  font-size:18px;
  cursor:pointer;
  text-decoration:none;
}

#navbar a:hover{
  font-weight:500;
  text-indent:5px;
}
p{
  margin:10px;
}
ol{
  margin-left:30px;
}
#main-doc{
  margin:0 auto;
}
header{
  color:black;
  margin:10px;
  font-size:1.8em;
  font-weight:500;
}
code{
  display:block;
  text-align:left;
  white-space:pre;
  word-break:normal;
  word-wrap:normal;
  line-height:1.5;
  background-color:#fff;
  padding:0 15px;
  margin:10px;
  border-radius:5px;
}

footer{
  padding:30px;
  text-align:center;
  color:#888;
}
@media only screen and (min-width:815px){
  body{
    flex-direction:row;
  }
#navbar{
  width:300px;
  position:fixed;
  height:100%;
}
}

#main-doc{
  margin:0 20px;
  margin-left:350px;
}

** end of undefined **

